---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# Frontend Guidelines Document

## Introduction

This document explains how the front end of our project is built and what makes it work efficiently for users. The main idea is to allow users to share URLs directly from their iPhone, and then view them later on a clean, modern website that summarizes content and organizes links by tags and dates. This guide outlines everything from the overall layout and technical choices to the details of design, performance, and user interaction. By following these guidelines, anyone—even without a technical background—can understand the design choices that create a seamless and pleasant user experience.

## Frontend Architecture

Our frontend architecture is built on Next.js, a framework that helps us create fast and interactive web pages. Next.js works smoothly with modern tools and is known for allowing easy integration with modern CSS frameworks like Tailwind CSS. The architecture is designed to be scalable, so new features can be added effortlessly, and maintainable, so updates and bug fixes are simple. The use of component-based development means every part of the user interface is a reusable piece of code that can be updated independently, ensuring that both performance and reliability remain strong even as the project grows.

## Design Principles

The design of the application is based on clear and user-friendly principles. Every decision makes the app more usable, accessible, and responsive. The user interfaces are built to be simple and modern, ensuring users can easily scan through saved links without distractions. Special attention is given to how information is displayed, using clear typography and spacious layouts so that the user can focus on the important details like the page title, summary, and tags. The consistent interface also guarantees accessibility for all users, regardless of the device they use.

## Styling and Theming

For styling, we use Tailwind CSS, a modern framework that keeps the design neat and responsive. Tailwind CSS allows us to write clean classes that help quickly style elements without having to write extensive custom CSS. The styling approach ensures consistency across the website, with components following a similar pattern and visual theme. This yields a unified look and feel, where every page, whether it’s the simple list of URLs or the detailed activity view, has a modern, professional appearance.

## Component Structure

The application is organized using a component-based approach. Each part of the user interface, such as the navigation menu, URL display card, and filtering tabs, is built as a separate component. This structure not only makes the code easier to read and maintain but also allows for components to be reused in different parts of the app. When a user expands a URL entry to see more details or switches tabs to filter content, these interactions rely on pre-built, modular interface components that ensure consistent behavior, easy updates, and a coherent design throughout the website.

## State Management

Managing information across our app is crucial, so we use state management carefully. The state is used to keep track of what URLs are displayed, how they’re filtered, and which user actions have been taken (like expanding an entry for more details). Although the project is based on Next.js, we integrate state management patterns—often using mechanisms provided by React such as the Context API or lightweight state libraries. This system makes sure that when users interact with the dashboard, like sorting or filtering their list of URLs, the changes appear immediately and consistently across the application.

## Routing and Navigation

Navigating through the application is made simple using Next.js’ built-in routing. When a user signs in via Google, the app directs them to the main dashboard where a list of saved URLs is clearly presented. The routing is designed so that users can easily jump between the main URL scanning page and the detailed activity or history page, where more information about each URL’s status and summary is available. Clear pathways and simple menu structures ensure that even those with minimal technical knowledge can move around the app with ease.

## Performance Optimization

Performance has been a major focus throughout the project. Techniques like lazy loading and code splitting ensure that only the necessary parts of the app are loaded at any given time. Optimizations are also in place to minimize large assets so that pages load quickly and efficiently. By using these strategies, users enjoy a smooth experience where the site responds quickly, whether they are scanning through their saved URLs or viewing detailed information in an expanded view.

## Testing and Quality Assurance

Quality is key when building the frontend of an app. The project includes several layers of testing to ensure that everything works as expected. Unit tests check that individual components behave correctly, while integration tests verify that these components work together seamlessly. End-to-end tests simulate real user experiences—from signing in with Google to sharing a URL and viewing the summarized content—to catch any issues before the app goes live. Automated testing tools help maintain high standards, ensuring that updates and new features continue to work well without disrupting the user experience.

## Conclusion and Overall Frontend Summary

This guide summarizes how the frontend of our project is built and designed to provide a simple, efficient experience for users. With Next.js powering the interface and Tailwind CSS giving everything a modern look, every part of the application from URL display to filtering and detail expansion is built to be both fast and easy to use. The component-based architecture, together with effective state management and robust testing, ensures that the site is not only visually appealing but also reliable and scalable. In the end, these guidelines support a coherent, user-friendly system where both non-technical and technical users can enjoy a smooth and powerful way to capture and revisit web content.
